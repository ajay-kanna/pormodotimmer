{"version":3,"sources":["SetTimer/SetTimer.js","Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["SetTimer","props","className","title","onClick","handleDecrease","icon","faMinus","count","handleIncrease","faPlus","Footer","href","aria-hidden","audio","document","querySelector","App","state","breakCount","sessionCount","clockCount","currentTimer","isPlaying","loop","undefined","convertToTime","minutes","Math","floor","seconds","handleLengthChange","timerType","newCount","setState","toLowerCase","handlePlayPause","clearInterval","setInterval","classList","add","style","backgroundColor","remove","play","handleReset","pause","currentTime","this","breakProps","sessionProps","faPause","faPlay","faSync","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1497e04b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SetTimer = (props) => {\r\n    return (\r\n        <div className=\"timer-container\">\r\n            <h3>{props.title}</h3>\r\n            <div className=\"set-timer-flex actions-wrapper\">\r\n                <button onClick={props.handleDecrease}><FontAwesomeIcon icon={faMinus} /></button>\r\n                <span>{props.count}</span>\r\n                <button onClick={props.handleIncrease}><FontAwesomeIcon icon={faPlus} /></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetTimer;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <div className=\"made-with\">\r\n                <h4>Made with ❤️ by <a href=\"https://github.com/satvikchachra\">Satvik Chachra</a></h4>\r\n            </div>\r\n\r\n            <div className=\"connect-with\">\r\n                <h4>Connect with me:</h4>\r\n        </div>\r\n\r\n            <div className=\"social-icons\">\r\n                <a href=\"https://www.github.com/satvikchachra\">\r\n                    <i className=\"fa fa-github fa-2x\" aria-hidden=\"true\"></i>\r\n                </a>\r\n                <a href=\"https://www.twitter.com/satvik_codes\">\r\n                    <i className=\"fa fa-twitter fa-2x\" aria-hidden=\"true\"></i>\r\n                </a>\r\n                <a href=\"https://www.linkedin.com/in/satvikchachra\">\r\n                    <i className=\"fa fa-linkedin fa-2x\" aria-hidden=\"true\"></i>\r\n                </a>\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport SetTimer from './SetTimer/SetTimer';\r\nimport Footer from './Footer/Footer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faSync, faPause } from '@fortawesome/free-solid-svg-icons';\r\nimport './App.css';\r\n\r\nconst audio = document.querySelector('#beep');\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    breakCount: 5,\r\n    sessionCount: 25,\r\n    clockCount: 25 * 60,\r\n    currentTimer: 'Session',\r\n    isPlaying: false,\r\n    loop: undefined\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.loop = undefined;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.loop);\r\n  }\r\n\r\n  // Convert count to time\r\n\r\n  convertToTime = (count) => {\r\n    let minutes = Math.floor(count / 60);\r\n    let seconds = count % 60;\r\n\r\n    minutes = minutes < 10 ? ('0' + minutes) : minutes;\r\n    seconds = seconds < 10 ? ('0' + seconds) : seconds;\r\n\r\n    return `${minutes}:${seconds}`;\r\n  }\r\n\r\n  // Handle change in session length and break length\r\n\r\n  handleLengthChange = (count, timerType) => {\r\n    const {\r\n      sessionCount,\r\n      breakCount,\r\n      isPlaying,\r\n      currentTimer\r\n    } = this.state;\r\n\r\n    let newCount;\r\n\r\n    // Update the new count\r\n\r\n    if (timerType === 'session') {\r\n      newCount = sessionCount + count;\r\n    } else {\r\n      newCount = breakCount + count;\r\n    }\r\n\r\n    // Update the session count and break count\r\n\r\n    if (newCount > 0 && newCount < 61 && !isPlaying) {\r\n      this.setState({\r\n        [`${timerType}Count`]: newCount\r\n      });\r\n\r\n      // Update the clock count to time derived by new count in seconds\r\n\r\n      if (currentTimer.toLowerCase() === timerType) {\r\n        this.setState({\r\n          clockCount: newCount * 60\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // To handle play/pause event\r\n\r\n  handlePlayPause = () => {\r\n    const { isPlaying } = this.state;\r\n\r\n    // Stop tracking of time when paused using clearInterval\r\n\r\n    if (isPlaying) {\r\n\r\n      clearInterval(this.loop);\r\n\r\n      this.setState({\r\n        isPlaying: false\r\n      });\r\n\r\n    } else {\r\n\r\n      // Keep track of time using setInterval\r\n\r\n      this.setState({\r\n        isPlaying: true\r\n      });\r\n\r\n      this.loop = setInterval(() => {\r\n        const { clockCount, currentTimer, sessionCount, breakCount } = this.state;\r\n\r\n        // Update the currentTimer and clockCount whenever timer hits zero\r\n\r\n        if (clockCount === 0) {\r\n          this.setState({\r\n            currentTimer: currentTimer === 'Session' ? 'Break' : 'Session',\r\n            clockCount: currentTimer === 'Session' ? breakCount * 60 : sessionCount * 60,\r\n          });\r\n\r\n          // To keep track of backgroundColor according to session/break\r\n\r\n          if (currentTimer === 'Session') {\r\n\r\n            document.querySelector('body').classList.add(\"background-blue\");\r\n            document.querySelector('.container').classList.add(\"background-light-blue\");\r\n            document.querySelector('.clock-container h1').style.backgroundColor = '#3498db';\r\n          } else {\r\n            document.querySelector('body').classList.remove(\"background-blue\");\r\n            document.querySelector('.container').classList.remove(\"background-light-blue\");\r\n            document.querySelector('.clock-container h1').style.backgroundColor = '#eb4d4b';\r\n          }\r\n\r\n          // For audio notification when the timer ends\r\n\r\n          audio.play();\r\n\r\n        } else {\r\n\r\n          // For timer like working decrease 1 from clockCount every second\r\n\r\n          this.setState({\r\n            clockCount: clockCount - 1\r\n          });\r\n        }\r\n\r\n      }, 1000);\r\n\r\n    }\r\n  }\r\n\r\n  // To handle reset timer event\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      breakCount: 5,\r\n      sessionCount: 25,\r\n      clockCount: 25 * 60,\r\n      currentTimer: 'Session',\r\n      isPlaying: false,\r\n    });\r\n\r\n    clearInterval(this.loop);\r\n\r\n    // If audio is playing when reset event is called\r\n\r\n    audio.pause();\r\n    audio.currentTime = 0;\r\n  }\r\n\r\n  render() {\r\n\r\n    const\r\n      { breakCount,\r\n        sessionCount,\r\n        clockCount,\r\n        currentTimer,\r\n        isPlaying } = this.state;\r\n\r\n    // To handle break properties\r\n\r\n    const breakProps = {\r\n      title: 'Break',\r\n      count: breakCount,\r\n      handleDecrease: () => this.handleLengthChange(-1, 'break'),\r\n      handleIncrease: () => this.handleLengthChange(1, 'break')\r\n    }\r\n\r\n    // To handle session properties\r\n\r\n    const sessionProps = {\r\n      title: 'Session',\r\n      count: sessionCount,\r\n      handleDecrease: () => this.handleLengthChange(-1, 'session'),\r\n      handleIncrease: () => this.handleLengthChange(1, 'session'),\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Pomodoro App</h1>\r\n        <div className=\"container\">\r\n\r\n          <div className=\"clock-container\">\r\n\r\n            <h1>{currentTimer}</h1>\r\n            <span>{this.convertToTime(clockCount)}</span>\r\n\r\n            <div className=\"set-timer-flex\">\r\n              <button onClick={this.handlePlayPause}>\r\n                <FontAwesomeIcon icon={isPlaying ? faPause : faPlay} />\r\n              </button>\r\n\r\n              <button onClick={this.handleReset}>\r\n                <FontAwesomeIcon icon={faSync} />\r\n              </button>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div className=\"set-timer-flex\">\r\n            <SetTimer {...breakProps} />\r\n            <SetTimer {...sessionProps} />\r\n          </div>\r\n\r\n          <div className=\"footer-container\">\r\n            <Footer />\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}